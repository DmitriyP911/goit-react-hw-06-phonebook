{"version":3,"sources":["Components/ContactsList/ContactList.module.css","Components/FilterContacts/FilterContacts.module.css","Components/Notification/notificationStyle.module.css","Components/FilterContacts/FilterContacts.jsx","redux/actions/actions.js","redux/containers/Filter.jsx","Components/Notification/Notification.jsx","Components/ContactsForm/ContactsForm.jsx","redux/containers/ContactsForm.jsx","Components/ContactsList/ContactsList.jsx","utils/getContacts.js","redux/containers/ContactsList.jsx","Components/App.jsx","redux/reducers/mainReducer.js","redux/reducers/contact.js","redux/reducers/filter.js","redux/store.js","index.js","Components/ContactsForm/ContactsForm.module.css","transitions/slide.module.css"],"names":["module","exports","FilterContacts","contactsFilter","contacts","filter","CSSTransition","in","length","timeout","classNames","slideTransition","unmountOnExit","className","styles","title","input","type","name","onChange","value","addContact","number","id","shortid","generate","connect","state","dispatch","target","Notification","titleWrap","initialState","num","tel","ContactsForm","notification","handleChange","setState","handleSubmit","e","preventDefault","props","undefined","find","contact","setTimeout","this","form","onSubmit","appear","label","button","Component","ContactList","deleteContact","key","serializedState","JSON","stringify","localStorage","setItem","err","console","error","setContacts","wrap","TransitionGroup","list","component","map","toLowerCase","includes","listItem","onClick","ContactsList","App","componentDidMount","hasOwnProperty","getItem","parse","getContacts","Filter","combineReducers","action","store","createStore","rootReducer","devToolsEnhancer","ReactDOM","render","document","getElementById"],"mappings":"kIACAA,EAAOC,QAAU,CAAC,KAAO,0BAA0B,KAAO,0BAA0B,SAAW,8BAA8B,OAAS,8B,mBCAtID,EAAOC,QAAU,CAAC,MAAQ,8BAA8B,MAAQ,gC,mBCAhED,EAAOC,QAAU,CAAC,MAAQ,iCAAiC,UAAY,uC,+LCqCxDC,EAhCQ,SAAC,GAAD,IAAIC,EAAJ,EAAIA,eAAgBC,EAApB,EAAoBA,SAAUC,EAA9B,EAA8BA,OAA9B,OACnB,kBAACC,EAAA,EAAD,CACIC,GAAIH,EAASI,OAAS,EACtBC,QAAS,IACTC,WAAYC,IACZC,eAAa,GAEb,6BACI,wBAAIC,UAAWC,IAAOC,OAAtB,gBACA,2BACIF,UAAWC,IAAOE,MAClBC,KAAK,OACLC,KAAK,SACLC,SAAUhB,EACViB,MAAOf,O,iBCdVgB,EAAa,SAAEH,EAAMI,GAAR,MAAsB,CAC5CL,KALuB,cAMvBM,GAAIC,IAAQC,WACZP,OACAI,WCGWI,eALS,SAAEC,GAAF,MAAe,CACnCvB,SAAUuB,EAAMvB,SAChBC,OAAQsB,EAAMxB,mBANS,SAAEyB,GAAF,MAAkB,CACzCzB,eAAgB,gBAAciB,EAAd,EAAIS,OAAUT,MAAd,OAA6BQ,EDaX,CAClCX,KAf2B,kBAgB3BZ,OCf+De,QAQpDM,CAAgDxB,G,iCCVlD4B,EAAe,kBACxB,yBAAKjB,UAAWC,IAAOiB,WACnB,wBAAIlB,UAAWC,IAAOC,OAAtB,4B,gBCGFiB,EAAe,CACjBd,KAAM,GACNI,OAAQ,IAGNW,EAAM,SAAEC,GAAF,MAAmB,KAARA,GAiFRC,E,4MA9EXR,M,2BACOK,G,IACHI,cAAc,I,EAGlBC,aAAe,YAAoC,IAAD,IAA/BR,OAAUX,EAAqB,EAArBA,KAAME,EAAe,EAAfA,MAC/B,EAAKkB,SAAL,eAAkBpB,EAAOE,K,EAG7BmB,aAAe,SAAEC,GACbA,EAAEC,iBADkB,MAEK,EAAKd,MAAtBT,EAFY,EAEZA,KAAMI,EAFM,EAENA,OAFM,EAGW,EAAKoB,MAA5BtC,EAHY,EAGZA,SAAUwB,EAHE,EAGFA,cAC4Ce,IAA1DvC,EAASwC,MAAM,SAAEC,GAAF,OAAeA,EAAQ3B,OAASA,KAC3Ce,EAAKX,IACLM,EAAUP,EAAYH,EAAMI,KAGhC,EAAKgB,SAAU,CACXF,cAAc,IAElBU,YAAY,kBAAM,EAAKR,SAAU,CAAEF,cAAc,MAAW,OAEhE,EAAKE,SAAL,eAAoBN,K,uDAGb,IAAD,EACiCe,KAAKpB,MAApCL,EADF,EACEA,OAAQJ,EADV,EACUA,KAAMkB,EADhB,EACgBA,aACtB,OACI,oCACI,0BAAMvB,UAAWC,IAAOkC,KACpBC,SAAUF,KAAKR,cACf,kBAACjC,EAAA,EAAD,CAAeC,IAAE,EAACE,QAAS,IAAKC,WAAYC,IAAiBuC,QAAM,GAC/D,wBAAIrC,UAAWC,IAAOC,OAAtB,cAGAgC,KAAKpB,MAAMS,cACX,kBAAC9B,EAAA,EAAD,CAAeC,GAAI6B,EACf1B,WAAYC,IACZuC,QAAM,EACNzC,QAAS,IACTG,eAAa,GACb,kBAAE,EAAF,OAIR,2BAAOC,UAAWC,IAAOqC,OAAzB,QACA,2BACItC,UAAWC,IAAOE,MAClBC,KAAK,OACLC,KAAK,OACLC,SAAU4B,KAAKV,aACfjB,MAAOF,IAEX,2BAAOL,UAAWC,IAAOqC,OAAzB,UACA,2BACItC,UAAWC,IAAOE,MAClBC,KAAK,OACLC,KAAK,SACLC,SAAU4B,KAAKV,aACfjB,MAAOE,IAEX,4BAAQT,UAAWC,IAAOsC,OACtBnC,KAAK,UADT,qB,GA/DOoC,aCRZ3B,eAJS,SAAEC,GAAF,MAAe,CACnCvB,SAAUuB,EAAMvB,YAGqB,KAA1BsB,CAAkCS,G,yBC0DlCmB,EA1DK,SAAC,GAA2C,IAAxClD,EAAuC,EAAvCA,SAAUC,EAA6B,EAA7BA,OAAQkD,EAAqB,EAArBA,cAKtC,OAJInD,EAASI,QCEU,SAAEgD,EAAKpC,GAC9B,IACI,IAAMqC,EAAkBC,KAAKC,UAAWvC,GACxCwC,aAAaC,QAASL,EAAKC,GAC7B,MAAOK,GACLC,QAAQC,MAAO,oBAAqBF,IDNpCG,CAAa,WAAY7D,GAIzB,yBAAKS,UAAWC,IAAOoD,QAEb9D,EAASI,QAAU,wCAEzB,kBAAC2D,EAAA,EAAD,CACItD,UAAWC,IAAOsD,KAClBC,UAAU,MACTjE,EAASkE,KAAK,SAAEzB,GAAF,OACXA,EAAQ3B,KAAKqD,cAAcC,SAAUnE,EAAOkE,eAGpC,kBAACjE,EAAA,EAAD,CACIkD,IAAKX,EAAQtB,GACbd,QAAS,IACTG,eAAa,EACbF,WAAYC,KAEZ,wBAAIE,UAAWC,IAAO2D,UAClB,2BACK5B,EAAQ3B,MAEb,sCACa2B,EAAQvB,QAErB,4BACIT,UAAWC,IAAOsC,OAClBlC,KAAM2B,EAAQtB,GACdmD,QAASnB,GAHb,YASR,WEhCb7B,eALS,SAAEC,GAAF,MAAe,CACnCvB,SAAUuB,EAAMvB,SAChBC,OAAQsB,EAAMtB,WANS,SAAEuB,GAAF,MAAkB,CACzC2B,cAAe,gBAAcrC,EAAd,EAAIW,OAAUX,KAAd,OAA4BU,EPON,CACrCX,KAX0B,iBAY1BM,GOToEL,QAQzDQ,CAAgDiD,GCJzDC,E,kLACoB,IAAD,OAKjB,GAJA7B,KAAKT,SAAU,CACXuC,mBAAmB,KAGlB9B,KAAKL,MAAMoC,eAAgB,YAAe,CAC3C,IAAM1E,EFjBS,SAAEoD,GACzB,IACI,IAAMC,EAAkBG,aAAamB,QAASvB,GAE9C,OAA2B,OAApBC,OAA2Bd,EAAYe,KAAKsB,MAAOvB,GAC5D,MAAOK,GACLC,QAAQC,MAAO,oBAAqBF,IEWfmB,CAAa,YAE1B7E,GACAA,EAASkE,KAAK,SAAEzB,GAAF,OACV,EAAKH,MAAMd,SAAUP,EAAYwB,EAAQ3B,KAAM2B,EAAQvB,e,+BAOnE,OACI,6BACI,kBAAC,EAAD,MACA,kBAAC4D,EAAD,MACA,kBAAC,EAAD,W,GAtBE7B,aA4BH3B,gBAAWkD,G,uBClCXO,4BAAiB,CAC5B/E,SCHoB,WAA2B,IAAzBuB,EAAwB,uDAAhB,GAAIyD,EAAY,uCAC9C,OAAQA,EAAOnE,MACX,IVFmB,cUGf,MAAM,GAAN,mBACOU,GADP,CAEI,CACIJ,GAAI6D,EAAO7D,GACXL,KAAMkE,EAAOlE,KACbI,OAAQ8D,EAAO9D,UAG3B,IVVsB,iBUWlB,OAAOK,EAAMtB,QAAQ,SAAEwC,GAAF,OAAeA,EAAQtB,KAAO6D,EAAO7D,MAE9D,QACI,OAAOI,IDXftB,OEJkB,WAA2B,IAAzBsB,EAAwB,uDAAhB,GAAIyD,EAAY,uCAC5C,OAAQA,EAAOnE,MACX,IXAuB,kBWCnB,OAAOmE,EAAO/E,OAElB,QACI,OAAOsB,MCDJ0D,EAFDC,sBAAaC,EAAaC,8BCCxCC,IAASC,OACP,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,EAAD,OAGFM,SAASC,eAAgB,U,kBCV3B5F,EAAOC,QAAU,CAAC,OAAS,6BAA6B,MAAQ,4BAA4B,KAAO,2BAA2B,MAAQ,4BAA4B,MAAQ,8B,kBCA1KD,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,YAAc,2BAA2B,KAAO,oBAAoB,WAAa,0BAA0B,OAAS,sBAAsB,WAAa,6B","file":"static/js/main.e4ef43ff.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"ContactList_wrap__qTkye\",\"list\":\"ContactList_list__Hmt6b\",\"listItem\":\"ContactList_listItem__2zPu8\",\"button\":\"ContactList_button__3JAIW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"FilterContacts_input__2Uzqa\",\"title\":\"FilterContacts_title__3y8SN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"notificationStyle_title__mBeO_\",\"titleWrap\":\"notificationStyle_titleWrap__6dhOp\"};","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./FilterContacts.module.css\";\r\nimport slideTransition from \"../../transitions/slide.module.css\"\r\nimport { CSSTransition } from \"react-transition-group\";\r\n\r\nconst FilterContacts = ( { contactsFilter, contacts, filter } ) => (\r\n    <CSSTransition\r\n        in={contacts.length > 1}\r\n        timeout={250}\r\n        classNames={slideTransition}\r\n        unmountOnExit\r\n    >\r\n        <div>\r\n            <h2 className={styles.title}>Find contact</h2>\r\n            <input\r\n                className={styles.input}\r\n                type=\"text\"\r\n                name=\"filter\"\r\n                onChange={contactsFilter}\r\n                value={filter}\r\n            />\r\n        </div>\r\n    </CSSTransition>\r\n);\r\n\r\nFilterContacts.propTypes = {\r\n    contactsFilter: PropTypes.func.isRequired,\r\n    filter: PropTypes.string,\r\n    contacts: PropTypes.arrayOf(\r\n        PropTypes.shape( {\r\n            id: PropTypes.string.isRequired,\r\n            name: PropTypes.string.isRequired,\r\n            number: PropTypes.string.isRequired,\r\n        } ).isRequired\r\n    ),\r\n};\r\n\r\nexport default FilterContacts;","import shortid from 'shortid';\r\n\r\nexport const ADD_CONTACT = \"ADD_CONTACT\";\r\nexport const DELETE_CONTACT = \"DELETE_CONTACT\";\r\nexport const CONTACTS_FILTER = \"CONTACTS_FILTER\";\r\n\r\nexport const addContact = ( name, number ) => ( {\r\n    type: ADD_CONTACT,\r\n    id: shortid.generate(),\r\n    name,\r\n    number,\r\n} );\r\n\r\nexport const deleteContact = ( id ) => ( {\r\n    type: DELETE_CONTACT,\r\n    id,\r\n} );\r\n\r\nexport const filter = ( filter ) => ( {\r\n    type: CONTACTS_FILTER,\r\n    filter,\r\n} );","import { connect } from \"react-redux\";\r\nimport FilterContacts from \"../../Components/FilterContacts/FilterContacts\";\r\nimport { filter } from \"../actions/actions\";\r\n\r\nconst mapDispatchToProps = ( dispatch ) => ( {\r\n    contactsFilter: ( { target: { value } } ) => dispatch( filter( value ) ),\r\n} );\r\n\r\nconst mapStateToProps = ( state ) => ( {\r\n    contacts: state.contacts,\r\n    filter: state.contactsFilter,\r\n} );\r\n\r\nexport default connect( mapStateToProps, mapDispatchToProps )( FilterContacts );","import React from 'react';\r\nimport styles from './notificationStyle.module.css';\r\n\r\nexport const Notification = () => (\r\n    <div className={styles.titleWrap}>\r\n        <h2 className={styles.title}>Contact already exist!</h2>\r\n    </div>\r\n)","import React, { Component } from \"react\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport { Notification } from \"../Notification/Notification\";\r\nimport styles from \"./ContactsForm.module.css\";\r\nimport slideTransition from \"../../transitions/slide.module.css\"\r\nimport PropTypes from \"prop-types\";\r\nimport { addContact } from \"../../redux/actions/actions\";\r\n\r\nconst initialState = {\r\n    name: \"\",\r\n    number: \"\",\r\n};\r\n\r\nconst num = ( tel ) => tel !== '';\r\n\r\nclass ContactsForm extends Component {\r\n    state = {\r\n        ...initialState,\r\n        notification: false\r\n    };\r\n\r\n    handleChange = ( { target: { name, value } } ) => {\r\n        this.setState( { [name]: value } );\r\n    };\r\n\r\n    handleSubmit = ( e ) => {\r\n        e.preventDefault();\r\n        const { name, number } = this.state;\r\n        const { contacts, dispatch } = this.props;\r\n        if( contacts.find( ( contact ) => contact.name === name ) === undefined ) {\r\n            if( num( number ) ) {\r\n                dispatch( addContact( name, number ) );\r\n            }\r\n        } else {\r\n            this.setState( {\r\n                notification: true\r\n            } )\r\n            setTimeout( () => this.setState( { notification: false } ), 2500 );\r\n        }\r\n        this.setState( { ...initialState } );\r\n    };\r\n\r\n    render () {\r\n        const { number, name, notification } = this.state;\r\n        return (\r\n            <>\r\n                <form className={styles.form}\r\n                    onSubmit={this.handleSubmit} >\r\n                    <CSSTransition in timeout={500} classNames={slideTransition} appear>\r\n                        <h1 className={styles.title}>Phonebook</h1>\r\n                    </CSSTransition>\r\n                    {\r\n                        this.state.notification &&\r\n                        <CSSTransition in={notification}\r\n                            classNames={slideTransition}\r\n                            appear\r\n                            timeout={250}\r\n                            unmountOnExit>\r\n                            < Notification />\r\n                        </CSSTransition>\r\n                    }\r\n\r\n                    <label className={styles.label}>Name</label>\r\n                    <input\r\n                        className={styles.input}\r\n                        type=\"text\"\r\n                        name=\"name\"\r\n                        onChange={this.handleChange}\r\n                        value={name}\r\n                    />\r\n                    <label className={styles.label}>Number</label>\r\n                    <input\r\n                        className={styles.input}\r\n                        type=\"text\"\r\n                        name=\"number\"\r\n                        onChange={this.handleChange}\r\n                        value={number}\r\n                    />\r\n                    <button className={styles.button}\r\n                        type=\"submit\">Add contact</button>\r\n                </form>\r\n            </>\r\n        );\r\n    }\r\n}\r\nContactsForm.propTypes = {\r\n    contacts: PropTypes.arrayOf(\r\n        PropTypes.shape( {\r\n            id: PropTypes.string.isRequired,\r\n            name: PropTypes.string.isRequired,\r\n            number: PropTypes.string.isRequired,\r\n        } )\r\n    ),\r\n};\r\nexport default ContactsForm;","import { connect } from \"react-redux\";\r\nimport ContactsForm from \"../../Components/ContactsForm/ContactsForm\";\r\n\r\nconst mapStateToProps = ( state ) => ( {\r\n    contacts: state.contacts,\r\n} );\r\n\r\nexport default connect( mapStateToProps, null )( ContactsForm );","import React from \"react\";\r\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\r\nimport styles from \"./ContactList.module.css\"\r\nimport PropTypes from \"prop-types\";\r\nimport slideTransition from '../../transitions/slide.module.css';\r\nimport { setContacts } from \"../../utils/getContacts\";\r\n\r\nconst ContactList = ( { contacts, filter, deleteContact } ) => {\r\n    if( contacts.length ) {\r\n        setContacts( \"contacts\", contacts );\r\n    }\r\n\r\n    return (\r\n        <div className={styles.wrap}>\r\n            {\r\n                !!contacts.length && <h2>Contacts</h2>\r\n            }\r\n            <TransitionGroup\r\n                className={styles.list}\r\n                component=\"ul\" >\r\n                {contacts.map( ( contact ) =>\r\n                    contact.name.toLowerCase().includes( filter.toLowerCase() )\r\n                        ?\r\n                        (\r\n                            <CSSTransition\r\n                                key={contact.id}\r\n                                timeout={250}\r\n                                unmountOnExit\r\n                                classNames={slideTransition}\r\n                            >\r\n                                <li className={styles.listItem}>\r\n                                    <p >\r\n                                        {contact.name}\r\n                                    </p>\r\n                                    <p>\r\n                                        Number: {contact.number}\r\n                                    </p>\r\n                                    <button\r\n                                        className={styles.button}\r\n                                        name={contact.id}\r\n                                        onClick={deleteContact}\r\n                                    >\r\n                                        Delete\r\n                                </button>\r\n                                </li>\r\n                            </CSSTransition>\r\n                        ) : null\r\n                )}\r\n            </TransitionGroup>\r\n        </div >\r\n    );\r\n};\r\n\r\nContactList.propTypes = {\r\n    contacts: PropTypes.arrayOf(\r\n        PropTypes.shape( {\r\n            id: PropTypes.string.isRequired,\r\n            name: PropTypes.string.isRequired,\r\n            number: PropTypes.string.isRequired,\r\n        } )\r\n    ),\r\n    filter: PropTypes.string,\r\n    deleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactList;","export const getContacts = ( key ) => {\r\n    try {\r\n        const serializedState = localStorage.getItem( key );\r\n\r\n        return serializedState === null ? undefined : JSON.parse( serializedState );\r\n    } catch( err ) {\r\n        console.error( \"Get state error: \", err );\r\n    }\r\n};\r\n\r\nexport const setContacts = ( key, value ) => {\r\n    try {\r\n        const serializedState = JSON.stringify( value );\r\n        localStorage.setItem( key, serializedState );\r\n    } catch( err ) {\r\n        console.error( \"Set state error: \", err );\r\n    }\r\n};","\r\nimport { connect } from \"react-redux\";\r\nimport ContactsList from \"../../Components/ContactsList/ContactsList\";\r\nimport { deleteContact } from \"../actions/actions\";\r\n\r\nconst mapDispatchToProps = ( dispatch ) => ( {\r\n    deleteContact: ( { target: { name } } ) => dispatch( deleteContact( name ) )\r\n} );\r\n\r\nconst mapStateToProps = ( state ) => ( {\r\n    contacts: state.contacts,\r\n    filter: state.filter,\r\n} );\r\n\r\nexport default connect( mapStateToProps, mapDispatchToProps )( ContactsList );","import React, { Component } from \"react\";\r\n\r\nimport Filter from \"../redux/containers/Filter\";\r\nimport ContactForm from \"../redux/containers/ContactsForm\";\r\nimport ContactList from \"../redux/containers/ContactsList\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { addContact } from \"../redux/actions/actions\";\r\nimport { getContacts } from \"../utils/getContacts\";\r\n\r\nclass App extends Component {\r\n    componentDidMount () {\r\n        this.setState( {\r\n            componentDidMount: true,\r\n        } );\r\n\r\n        if( !this.props.hasOwnProperty( \"contacts\" ) ) {\r\n            const contacts = getContacts( \"contacts\" );\r\n\r\n            if( contacts ) {\r\n                contacts.map( ( contact ) =>\r\n                    this.props.dispatch( addContact( contact.name, contact.number ) )\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div>\r\n                <ContactForm />\r\n                <Filter />\r\n                <ContactList />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect()( App );","import { combineReducers } from \"redux\";\r\nimport { contacts } from \"./contact\";\r\nimport { filter } from \"./filter\";\r\n\r\nexport default combineReducers( {\r\n    contacts,\r\n    filter,\r\n} );","import { ADD_CONTACT, DELETE_CONTACT } from \"../actions/actions\";\r\n\r\nexport const contacts = ( state = [], action ) => {\r\n    switch( action.type ) {\r\n        case ADD_CONTACT:\r\n            return [\r\n                ...state,\r\n                {\r\n                    id: action.id,\r\n                    name: action.name,\r\n                    number: action.number\r\n                },\r\n            ];\r\n        case DELETE_CONTACT:\r\n            return state.filter( ( contact ) => contact.id !== action.id );\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};","import { CONTACTS_FILTER } from \"../actions/actions\";\r\n\r\nexport const filter = ( state = \"\", action ) => {\r\n    switch( action.type ) {\r\n        case CONTACTS_FILTER:\r\n            return action.filter;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};","import { createStore } from 'redux';\r\nimport { devToolsEnhancer } from 'redux-devtools-extension';\r\n\r\nimport rootReducer from \"./reducers/mainReducer\"\r\n\r\nconst store = createStore( rootReducer, devToolsEnhancer() )\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App';\nimport store from './redux/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n  ,\n  document.getElementById( 'root' )\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"ContactsForm_button__1P-wn\",\"title\":\"ContactsForm_title__1_zNY\",\"form\":\"ContactsForm_form__Ww6AK\",\"label\":\"ContactsForm_label__pFUgc\",\"input\":\"ContactsForm_input__Q0YGl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"slide_enter__1RaoE\",\"enterActive\":\"slide_enterActive__1dIkW\",\"exit\":\"slide_exit__1rkSM\",\"exitActive\":\"slide_exitActive__1t909\",\"appear\":\"slide_appear__3Gt_x\",\"appearDone\":\"slide_appearDone__2g7pd\"};"],"sourceRoot":""}